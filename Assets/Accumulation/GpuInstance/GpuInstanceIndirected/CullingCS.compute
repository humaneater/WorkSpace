// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct MeshProperties
{
    float4x4 mat;
    float4x4 mat_I_M;
    float4 color;
};

uint depthTextureSizeX;
uint depthTextureSizeY;

StructuredBuffer<MeshProperties> _InputMatrix;
AppendStructuredBuffer<MeshProperties> _PropertisMatrix;
float4x4 _WorldToCameraMatrix;
Texture2D<float4> _CameraDepthTexture;
SAMPLER(sampler_CameraDepthTexture);
static float3 boundMin = float3(-0.2f, 0.0f, -0.3f); //包围盒最小点
static float3 boundMax = float3(0.2f, 0.5f, 0.3f); //包围盒最大点


bool IsInClipSpace(float4 clipPosition)
{
    #if  !UNITY_REVERSED_Z
    return clipPosition.x > -clipPosition.w && clipPosition.x < clipPosition.w &&
        clipPosition.y > -clipPosition.w && clipPosition.y < clipPosition.w &&
        clipPosition.z > -clipPosition.w && clipPosition.z < clipPosition.w;
    #else
        return clipPosition.x > -clipPosition.w && clipPosition.x < clipPosition.w&&
        clipPosition.y > -clipPosition.w && clipPosition.y < clipPosition.w&&
        clipPosition.z > 0 && clipPosition.z < clipPosition.w;
    #endif
    return false;
}

[numthreads(640,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4x4 MVPMatrix = mul(_WorldToCameraMatrix, _InputMatrix[id.x].mat);

    //obj空间下的八个点坐标
    float4 boundVerts[8];
    boundVerts[0] = float4(boundMin, 1);
    boundVerts[1] = float4(boundMax, 1);
    boundVerts[2] = float4(boundMax.x, boundMax.y, boundMin.z, 1);
    boundVerts[3] = float4(boundMax.x, boundMin.y, boundMax.z, 1);
    boundVerts[4] = float4(boundMax.x, boundMin.y, boundMin.z, 1);
    boundVerts[5] = float4(boundMin.x, boundMax.y, boundMax.z, 1);
    boundVerts[6] = float4(boundMin.x, boundMax.y, boundMin.z, 1);
    boundVerts[7] = float4(boundMin.x, boundMin.y, boundMax.z, 1);

    float minX = 1, minY = 1, minZ = 1, maxX = -1, maxY = -1, maxZ = -1;

    bool isInView = false;
    for (int i = 0; i < 8; i++)
    {
        float4 clipPos = mul(MVPMatrix, boundVerts[i]);
        if (!isInView && IsInClipSpace(clipPos))isInView = true;
        float3 ndc = clipPos.xyz / clipPos.w;
        maxX = maxX > ndc.x ? maxX : ndc.x;
        maxY = maxY > ndc.y ? maxY : ndc.y;
        maxZ = maxZ > ndc.z ? maxZ : ndc.z;
        minX = minX < ndc.x ? minX : ndc.x;
        minY = minY < ndc.y ? minY : ndc.y;
        minZ = minZ < ndc.z ? minZ : ndc.z;
    }
    if (!isInView) return;

    float2 leftButtom = float2(minX, minY) * 0.5 + 0.5;
    float2 rightTop = float2(maxX, maxY) * 0.5 + 0.5;
    float depth = maxZ;
    #if !UNITY_REVERSED_Z
        depth = minZ;
        depth = depth * 0.5f + 0.5f;
    #endif
    //计算应该读取哪层mipmap
    uint mipmapLevel = (uint)clamp(
        log2(max((maxX - minX) * depthTextureSizeX, (maxY - minY) * depthTextureSizeY) * 0.5f), 0,
        log2(max(depthTextureSizeX, depthTextureSizeY)) - 4);
    //当前mipmap的大小
    uint2 size = uint2(depthTextureSizeX, depthTextureSizeY);
    size /= (1 << mipmapLevel);

    //左下角和右下角点所在的像素,不使用clamp会导致相机左右边出现一条剔除不掉的草，因为有些草部分超框了
    uint2 pixelLeftBottom = uint2((uint)clamp(leftButtom.x * size.x, 0, size.x - 1),
                                  (uint)clamp(leftButtom.y * size.y, 0, size.y - 1));
    uint2 pixelRightTop = uint2((uint)clamp(size.x * rightTop.x, 0, size.x - 1),
                                (uint)clamp(rightTop.y * size.y, 0, size.y - 1));
    float depthInTexture = _CameraDepthTexture.mips[mipmapLevel][pixelLeftBottom].r;
    #if !UNITY_REVERSED_Z
    if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y)
    {
        depthInTexture = max(max(depthInTexture, _CameraDepthTexture.mips[mipmapLevel][pixelRightTop].r),
                             max(_CameraDepthTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r,
                                 _CameraDepthTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
    }
    else if (pixelLeftBottom.x < pixelRightTop.x)
        depthInTexture = max(depthInTexture,
                             _CameraDepthTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
    else if (pixelLeftBottom.y < pixelRightTop.y)
        depthInTexture = max(depthInTexture,
                             _CameraDepthTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

    if (depthInTexture < depth)
        return;
    #else
        if (pixelLeftBottom.x < pixelRightTop.x && pixelLeftBottom.y < pixelRightTop.y) {
            depthInTexture = min(min(depthInTexture, _CameraDepthTexture.mips[mipmapLevel][pixelRightTop].r),
                min(_CameraDepthTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r, _CameraDepthTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r));
        }
        else if (pixelLeftBottom.x < pixelRightTop.x)
            depthInTexture = min(depthInTexture, _CameraDepthTexture.mips[mipmapLevel][int2(pixelRightTop.x, pixelLeftBottom.y)].r);
        else if (pixelLeftBottom.y < pixelRightTop.y)
            depthInTexture = min(depthInTexture, _CameraDepthTexture.mips[mipmapLevel][int2(pixelLeftBottom.x, pixelRightTop.y)].r);

        if (depthInTexture > depth+0.0001f )
            return;
    #endif

    /*
    float4 clipSpacePos = mul(MVPMatrix,float3(0,0,0));
    if (!IsInClipSpace(clipSpacePos))
    {
        return;
    }
    clipSpacePos.xyz /=clipSpacePos.w;
    clipSpacePos.xy = clipSpacePos.xy * 0.5f+0.5f;
    float depth = _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture,clipSpacePos.xy,0);
    */


    _PropertisMatrix.Append(_InputMatrix[id.x]);
}
