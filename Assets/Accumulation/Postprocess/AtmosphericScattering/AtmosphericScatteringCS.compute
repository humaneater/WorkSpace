// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TransmittanceLUTPass
#pragma kernel PrecomputeScattering
#include "Assets/Accumulation/Postprocess/AtmosphericScattering/Function.hlsl"




[numthreads(8,8,1)]
void TransmittanceLUTPass(uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / float2(256, 256);
    AtmosphereParameter atmosphere = (AtmosphereParameter)0;
    atmosphere = InitAtmosphereParameter(atmosphere,_AtmosphereTop,_PlanetRadius);

    float height, cosT;
    GetHeightAndCosTheta(atmosphere,uv, height, cosT);
    float3 col = ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, height, cosT);
    _TransmittanceLUT[id.xy] = float4(col, 1);
}



[numthreads(8,8,8)]
void PrecomputeScattering(uint3 id : SV_DispatchThreadID)
{
    AtmosphereParameter atmosphere = (AtmosphereParameter)0;
    atmosphere = InitAtmosphereParameter(atmosphere,_AtmosphereTop,_PlanetRadius);
    float3 uvw = id.xyz;
    float3 rayleigh = 0;
    float3 mie = 0;
    ComputeSingleScatteringTexture(atmosphere,_TransmittanceLUT_Pre,uvw,rayleigh,mie);
    _SCATTERING_TEXTURE[id.xyz] = float4( rayleigh + mie,1);
}
